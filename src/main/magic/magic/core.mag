;;
;; Magic core namespace
;;

;; ============================================================
;; Basic language tools

(defmacro comment [& _] nil)


;; =============================================================
;; Conditionals and control flow

(defmacro when [a b] 
  `(if ~a ~b nil))

;; =========================================
;; Basic sequence functions
;;

(defn vec [a] 
  (. magic.RT vec a))

(defn nth [a index]
  (. magic.RT nth a index))

(defn first [a]
  (. magic.RT first a))

(defn seq [a]
  (. magic.RT seq a))

(defn next [a]
  (. magic.RT next a))

(defn str [a] 
  (. magic.RT toString a))

;; ===========================================================
;; Boolean functions and basic logic

(defn boolean [a] 
  (. magic.RT boolObject a))

(defn not [a] 
  (. magic.RT not a))

(defn identity [a] 
  a)

;; ============================================================
;; Predicates

(defn vector? [a] 
  (instance? magic.data.APersistentVector a))

(defn list? [a] 
  (instance? magic.data.APersistentList a))

(defn boolean? [a] 
  (instance? java.lang.Boolean a))

(defn coll? [a]
  (instance? java.util.Collection a))

(defn number? [a] 
  (instance? java.lang.Number a))

(defn identical? [a b] 
  (boolean (. magic.RT identical a b)))

(defn nil? [a] 
  (boolean (identical? nil a)))

;; ================================================================
;; Maths functions
;;
;; TODO: these should support all arities


(defn + [a b]
  (. magic.Maths add a b)) 

(defn - [a b]
  (. magic.Maths sub a b)) 

(defn * [a b]
  (. magic.Maths mul a b)) 

(defn inc [a]
  (. magic.Maths add a 1)) 

(defn dec [a]
  (. magic.Maths sub a 1)) 

(defn == [a b]
  (. magic.Maths eq a b))

(defn < [a b]
  (. magic.Maths lt a b))

(defn > [a b]
  (. magic.Maths gt a b))

(defn != [a b]
  (not (. magic.Maths eq a b)))

(defn >= [a b]
  (not (. magic.Maths lt a b)))

(defn <= [a b]
  (not (. magic.Maths gt a b)))

